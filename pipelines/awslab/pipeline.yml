resources:

- name: cf-labs
  check_every: 30s
  type: git
  source:
    uri: {{cf_labs_git}}
    branch: {{cf_labs_git_branch}}
    
- name: bosh-deployments
  check_every: 60s
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git
    branch: master

    # - name: terraform-state
    #   # Upped the freq to help with troubleshooting, feel free to drop
    #   check_every: 20s
    #   type: s3
    #   source:
    #     access_key_id: {{aws_tf_access_key}}
    #     secret_access_key: {{aws_tf_secret_key}}
    #     region: {{region}}
    #     bucket: {{s3_bucket}}
    #     # This doesn't work with a fixed filename for no good reason
    #     regexp: '(.*).tfstate'
    
- name: terraform-state
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: terraform.tfstate
- name: bosh-creds
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: creds.yml
- name: bosh-state
  check_every: 20s
  type: s3
  source:
    disable_ssl: false
    access_key_id: {{aws_tf_access_key}}
    secret_access_key: {{aws_tf_secret_key}}
    bucket: {{s3_bucket}}
    region_name: {{region}}
    versioned_file: state.json



jobs:

- name: bootstrap-terraform-state
  serial_groups: [terraform]
  plan:
  - get: cf-labs
    trigger: true
  - task: create-terraform-state
    params:
      S3_BUCKET_TERRAFORM: {{s3_bucket}}
      REGION: {{region}}
      AWS_ACCESS_KEY_ID: {{aws_tf_access_key}}
      AWS_SECRET_ACCESS_KEY: {{aws_tf_secret_key}}
    # This goes off and creates the tfstate (empty) and its bucket too if missing
    file: cf-labs/tasks/create-initial-terraform-state/task.yml

- name: pave-bosh-lite
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: plan-terraform
    config: &tf_plan_block
      platform: linux
      inputs: &tf_inputs
        - name: cf-labs
        - name: terraform-state
      outputs:
        - name: plans
      image_resource: &standard_image
        type: docker-image
        source:
          repository: opsforge/concourse-tools
      run:
        path: sh
        args:
          - -exc
          - |
            cat terraform-state/terraform.tfstate &&
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform plan -state terraform-state/terraform.tfstate \
            -var 'ec2_key_pair_pub={{ec2_instance_key}}' \
            -var 'aws_access_key={{aws_tf_access_key}}' \
            -var 'aws_secret_key={{aws_tf_secret_key}}' \
            -out plans/terraform.tfplan \
            cf-labs/pipelines/awslab/terraform
  - task: apply-terraform
    config: &tf_apply_block
      platform: linux
      inputs:
        - name: cf-labs
        - name: plans
      outputs:
        - name: terraform-state-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform apply -auto-approve \
            -state-out terraform-state-out/terraform.tfstate \
            plans/terraform.tfplan
    ensure: &tf_save_state
      put: terraform-state
      params:
        file: terraform-state-out/*.tfstate
        acl: private
        
- name: deploy-bosh-lite
  serial_groups: [bosh]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
      passed: [pave-bosh-lite]
      trigger: true
    - get: bosh-creds
    - get: bosh-state
    - get: bosh-deployments
      # Gets triggered by the terraform-state get because that only passes if bootstrap passed too
      # trigger: true
  - task: bosh-lite-configure
    config: &bosh_deploy
      platform: linux
      inputs: &bosh_input_files
        - name: cf-labs
        - name: terraform-state
        - name: bosh-deployments
      outputs:
        - name: bosh-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            cat <<EOF > bosh.pem
            {{ec2_private_key}}
            EOF && \
            bosh create-env bosh-deployment/bosh.yml \
            --state=terraform-state/state.json \
            --vars-store=terraform-state/creds.yml \
            -o bosh-deployment/aws/cpi.yml \
            -o bosh-deployment/bosh-lite.yml \
            -o bosh-deployment/bosh-lite-runc.yml \
            -o bosh-deployment/jumpbox-user.yml \ 
            -o bosh-deployment/external-ip-with-registry-not-recommended.yml \
            -v director_name=$(terraform output -state=terraform-state/terraform.tfstate bosh_name | sed 's/^.*=.//') \
            -v internal_cidr=$(terraform output -state=terraform-state/terraform.tfstate base_cidr | sed 's/^.*=.//') \
            -v internal_gw=$(terraform output -state=terraform-state/terraform.tfstate gw_ip | sed 's/^.*=.//') \
            -v internal_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_ip | sed 's/^.*=.//') \
            -v access_key_id={{aws_tf_access_key}} \
            -v secret_access_key={{aws_tf_secret_key}} \
            -v region=$(terraform output -state=terraform-state/terraform.tfstate region | sed 's/^.*=.//') \
            -v az=$(terraform output -state=terraform-state/terraform.tfstate az | sed 's/^.*=.//') \
            -v default_key_name=$(terraform output -state=terraform-state/terraform.tfstate ec2_keyname | sed 's/^.*=.//') \
            -v default_security_groups=[$(terraform output -state=terraform-state/terraform.tfstate default_sg_name | sed 's/^.*=.//')] \
            --var-file private_key=bosh.pem \
            -v subnet_id=$(terraform output -state=terraform-state/terraform.tfstate base_subnet | sed 's/^.*=.//') \
            -v external_ip=$(terraform output -state=terraform-state/terraform.tfstate bosh_eip | sed 's/^.*=.//') && \
            \
            cp terraform-state/state.json bosh-out/state.json && \
            cp terraform-state/creds.yml bosh-out/creds.yml
            
    ensure: &bosh_save_files
      put: bosh-creds
      params:
        file: bosh-out/*
        acl: private
            

- name: wipe-terraform
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: cf-labs
    - get: terraform-state
  # - task: plan-terraform
  #   config: *tf_plan_block
  - task: wipe-terraform
    config: &tf_wipe_block
      platform: linux
      inputs: *tf_inputs
      outputs:
        - name: terraform-state-out
      image_resource: *standard_image
      run:
        path: sh
        args:
          - -exc
          - |
            cat terraform-state/terraform.tfstate &&
            terraform init cf-labs/pipelines/awslab/terraform &&
            terraform destroy -force -state terraform-state/terraform.tfstate \
            -var 'ec2_key_pair_pub={{ec2_instance_key}}' \
            -var 'aws_access_key={{aws_tf_access_key}}' \
            -var 'aws_secret_key={{aws_tf_secret_key}}' \
            -state-out terraform-state-out/terraform.tfstate \
            cf-labs/pipelines/awslab/terraform
    ensure: *tf_save_state
